{
  "permissions": {
    "allow": [
      "Bash(git:*)",
      "Bash(./gradlew:*)",
      "Bash(find:*)",
      "Bash(gh:*)",
      "Bash(adb:*)",
      "Bash(xcrun:*)",
      "Bash(xcodebuild:*)",
      "Bash(open:*)",
      "Bash(mkdir:*)",
      "Bash(cp:*)",
      "Bash(mv:*)",
      "Bash(rm:*)",
      "Bash(chmod:*)",
      "Bash(ls:*)",
      "Bash(cat:*)",
      "Bash(grep:*)",
      "Bash(rg:*)",
      "Bash(sed:*)",
      "Bash(awk:*)",
      "Bash(sort:*)",
      "Bash(uniq:*)",
      "Bash(head:*)",
      "Bash(tail:*)",
      "Bash(wc:*)",
      "Bash(echo:*)",
      "Bash(printf:*)",
      "Bash(which:*)",
      "Bash(whereis:*)",
      "Bash(brew:*)",
      "Bash(npm:*)",
      "Bash(yarn:*)",
      "Bash(pnpm:*)",
      "Bash(node:*)",
      "Bash(npx:*)",
      "Bash(curl:*)",
      "Bash(wget:*)",
      "Bash(rsync:*)",
      "Bash(tar:*)",
      "Bash(zip:*)",
      "Bash(unzip:*)",
      "Bash(ps:*)",
      "Bash(kill:*)",
      "Bash(killall:*)",
      "Bash(lsof:*)",
      "Bash(netstat:*)",
      "Bash(ping:*)",
      "Bash(nslookup:*)",
      "Bash(dig:*)",
      "Bash(ssh:*)",
      "Bash(scp:*)",
      "Bash(rsync:*)",
      "Bash(docker:*)",
      "Bash(docker-compose:*)",
      "Fetch(domain:*)"
    ],
    "deny": [
      "Bash(rm -rf /:*)",
      "Bash(sudo rm:*)",
      "Bash(dd:*)",
      "Bash(mkfs:*)",
      "Bash(fdisk:*)",
      "Bash(format:*)",
      "Bash(sudo shutdown:*)",
      "Bash(sudo reboot:*)",
      "Bash(sudo halt:*)",
      "Bash(sudo poweroff:*)",
      "Bash(sudo passwd:*)",
      "Bash(sudo su:*)",
      "Bash(sudo chmod 777:*)",
      "Bash(sudo chown root:*)",
      "Bash(curl *://*/rm:*)",
      "Bash(wget *://*/rm:*)",
      "Bash(git push --force-with-lease origin main:*)",
      "Bash(git push --force origin main:*)",
      "Bash(git push -f origin main:*)",
      "Bash(git reset --hard origin/main:*)",
      "Bash(git clean -fdx:*)"
    ]
  },
  "environment": {
    "KOTLIN_MULTIPLATFORM": "true"
  },
  "aliases": {
    "build-android": "./gradlew :composeApp:assembleDebug",
    "build-ios": "./gradlew :composeApp:compileKotlinIosX64",
    "lint": "./gradlew ktlintCheck",
    "format": "./gradlew ktlintFormat",
    "test": "./gradlew test",
    "clean": "./gradlew clean",
    "quality-check": "./gradlew ktlintCheck && ./gradlew :composeApp:lintDebug"
  },
  "workflows": {
    "commit": [
      "./gradlew ktlintFormat",
      "./gradlew ktlintCheck",
      "git add .",
      "git commit"
    ],
    "feature-start": [
      "git checkout main",
      "git pull origin main",
      "git checkout -b"
    ],
    "release-prep": [
      "./gradlew clean",
      "./gradlew ktlintCheck",
      "./gradlew :composeApp:lintDebug",
      "./gradlew test"
    ]
  },
  "file_patterns": {
    "kotlin_files": "**/*.kt",
    "kotlin_script_files": "**/*.kts",
    "android_manifest": "**/AndroidManifest.xml",
    "gradle_files": "**/build.gradle.kts",
    "gradle_properties": "**/gradle.properties",
    "resources": "**/src/*/res/**/*",
    "compose_resources": "**/composeResources/**/*",
    "sqldelight": "**/*.sq",
    "config_files": ["CLAUDE.md", "README.md", ".gitignore", "settings.gradle.kts"]
  },
  "project_context": {
    "type": "kotlin_multiplatform_mobile",
    "platforms": ["android", "ios"],
    "architecture": "clean_architecture",
    "ui_framework": "compose_multiplatform",
    "di_framework": "koin",
    "database": "sqldelight",
    "backend": "supabase",
    "async": "coroutines_flow"
  },
  "mcpServers": {
    "android-emulator": {
      "command": "node",
      "args": ["/path/to/mcp-server-android"],
      "env": {
        "ANDROID_HOME": "${ANDROID_HOME}",
        "EMULATOR_NAME": "Pixel_7_API_34"
      }
    },
    "ios-simulator": {
      "command": "node",
      "args": ["/path/to/mcp-server-ios"],
      "env": {
        "SIMULATOR_NAME": "iPhone 15 Pro"
      }
    },
    "gradle": {
      "command": "node",
      "args": ["/path/to/mcp-server-gradle"],
      "env": {
        "GRADLE_HOME": "${GRADLE_HOME}"
      }
    }
  },
  "customCommands": {
    "/test-reminder": {
      "description": "Run all reminder-related tests",
      "command": "./gradlew test --tests '*Reminder*'"
    },
    "/build-all": {
      "description": "Build both Android and iOS apps",
      "command": "./gradlew :composeApp:assembleDebug && cd iosApp && xcodebuild -scheme iosApp -configuration Debug"
    },
    "/clean-build": {
      "description": "Clean and rebuild the entire project",
      "command": "./gradlew clean && ./gradlew build"
    },
    "/format": {
      "description": "Format all Kotlin code",
      "command": "./gradlew ktlintFormat"
    },
    "/check": {
      "description": "Run all quality checks",
      "command": "./gradlew ktlintCheck && ./gradlew :composeApp:lintDebug && ./gradlew test"
    },
    "/find-patterns": {
      "description": "Find existing code patterns in the project",
      "prompt": "Search for existing patterns (UseCase, ViewModel, Repository) and show examples to follow for new implementations."
    },
    "/setup-feature": {
      "description": "Setup a complete feature with Clean Architecture",
      "prompt": "Create a complete feature following Clean Architecture: domain (entity, use case, repository interface), data (repository impl, data sources), and presentation (viewmodel, UI state, composable)."
    },
    "/explore-feature": {
      "description": "Explore all files related to a feature",
      "prompt": "Use parallel search tools to find all files related to the specified feature across domain, data, and presentation layers."
    },
    "/tdd-start": {
      "description": "Start TDD workflow for a new feature",
      "prompt": "Begin with writing failing tests for the specified feature, then guide through implementation to make tests pass."
    }
  },
  "tddSettings": {
    "enabled": true,
    "testFirst": true,
    "autoGenerateTestCases": true,
    "coverageThreshold": 80,
    "testTemplatesPath": "CLAUDE.md#test-templates"
  },
  "patternFollowing": {
    "patternDiscoveryPath": "CLAUDE.md#code-patterns-and-examples",
    "autoImportDependencies": true,
    "followProjectConventions": true,
    "preferExistingPatterns": true
  },
  "qualityGates": {
    "preCommit": [
      "./gradlew ktlintCheck",
      "./gradlew test"
    ],
    "preMerge": [
      "./gradlew ktlintCheck",
      "./gradlew :composeApp:lintDebug",
      "./gradlew test",
      "./gradlew :composeApp:assembleDebug"
    ]
  },
  "workflowOptimization": {
    "parallelSearches": true,
    "autoGenerateTests": true,
    "smartCodeCompletion": true,
    "iterativeImprovement": true,
    "thinkModeForComplexTasks": true,
    "exploreBeforeCoding": true
  }
}
